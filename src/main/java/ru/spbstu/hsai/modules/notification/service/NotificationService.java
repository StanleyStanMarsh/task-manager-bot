package ru.spbstu.hsai.modules.notification.service;

import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Flux;
import ru.spbstu.hsai.modules.simpletaskmanagment.model.SimpleTask;
import ru.spbstu.hsai.modules.simpletaskmanagment.repository.SimpleTaskRepository;
import ru.spbstu.hsai.modules.usermanagement.service.UserService;
import ru.spbstu.hsai.api.commands.notifier.TelegramNotifySender;
import ru.spbstu.hsai.modules.usermanagement.model.User;
import ru.spbstu.hsai.modules.simpletaskmanagment.service.SimpleTaskService;

import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.List;

@Service
public class NotificationService {
    private final UserService userService;
    private final TelegramNotifySender notifySender;
    private final SimpleTaskService taskService;
    private static final List<String> SUPPORTED_ZONES = List.of(
            "Europe/Kaliningrad", "Europe/Moscow", "Europe/Samara",
            "Asia/Yekaterinburg", "Asia/Omsk", "Asia/Krasnoyarsk",
            "Asia/Irkutsk", "Asia/Yakutsk", "Asia/Vladivostok",
            "Asia/Magadan", "Asia/Kamchatka"
    );


    public NotificationService(
                               UserService userService,
                               TelegramNotifySender notifySender, SimpleTaskService taskService) {
        this.userService = userService;
        this.notifySender = notifySender;
        this.taskService =taskService;
    }

    public void checkAndNotify() {
        Instant nowUtc = Instant.now();

        boolean anyZoneMatches = SUPPORTED_ZONES.stream()
                .map(ZoneId::of)
                .map(zone -> ZonedDateTime.ofInstant(nowUtc, zone))
                .anyMatch(time -> (time.getHour() == 0 || time.getHour() == 23) && time.getMinute() == 0);

        if (!anyZoneMatches) {
            return; // –ù–∏—á–µ–≥–æ –Ω–µ –¥–µ–ª–∞–µ–º, –µ—Å–ª–∏ –Ω–∏ –≤ –æ–¥–Ω–æ–º –Ω—É–∂–Ω–æ–º –ø–æ—è—Å–µ –Ω–µ 12:00 –∏–ª–∏ 23:00
        }
        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
        // TODO –ò–∑–º–µ–Ω–∏—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é —Ç–∞—Å–∫–æ–≤:
        //  - –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∞–≥—Ä–µ–≥–∞—Ü–∏—é –æ—Ç–¥–µ–ª—å–Ω–æ –ø–æ —Ä–µ–º–∞–π–Ω–¥–µ—Ä–∞–º: –æ—Ç–¥–µ–ª—å–Ω–æ –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–±–æ—Ä–∫–∏ –ø–æ ONE_HOUR_BEFORE, –ø–æ ONE_DAY_BEFORE, –ø–æ ONE_WEEK_BEFORE
        //  - –ø—Ä–∏ —ç—Ç–æ–º –≤ —Ñ—É–Ω–∫—Ü–∏—é –º–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –¥–µ–ª–∞—Ç—å –≤—ã–±–æ—Ä–∫—É —Ç–æ–ª—å–∫–æ –Ω–∞ –æ–¥–∏–Ω —á–∞—Å/–¥–µ–Ω—å/–Ω–µ–¥–µ–ª—é –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –ø–æ—è—Å–∞
        //  - —É—Å–ª–æ–≤–Ω–æ –±—É–¥–µ—Ç findForOneHourBefore(), findForOneDayBefore(), findForOneWeekBefore(), –≤ –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥–µ—Ç –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å—Å—è —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å:
        /*
        public Flux<MyDocument> findForOneDayBefore(ZoneId zoneId) {
            LocalDate zonedYesterday = LocalDate.now(zoneId).minusDays(1);
            Instant start = zonedYesterday.atStartOfDay(zoneId).toInstant();
            Instant end = zonedYesterday.plusDays(1).atStartOfDay(zoneId).toInstant();

            Criteria criteria = new Criteria().andOperator(
                Criteria.where("timestamp").gte(Date.from(start)),
                Criteria.where("timestamp").lt(Date.from(end)),
                Criteria.where("reminder").is("ONE_DAY_BEFORE")
            );

            Query query = new Query(criteria);
            // !!!ReactiveMongoTemplate mongoTemplate
            return mongoTemplate.find(query, MyDocument.class);
        }

        –±—É–¥–µ–º –ø—Ä–æ—Ö–æ–¥–∏—Ç—å—Å—è –ø–æ –≤—Å–µ–º –ø–æ—è—Å–∞–º –∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ—è—Å–∞ –≤—ã–∑—ã–≤–∞—Ç—å 3 –∑–∞–ø—Ä–æ—Å–∞
         */
        Flux<Void> reminderNotifications = taskService.getTasksForTenDays()
                // FIXME –∞–≥—Ä–µ–≥–∞—Ü–∏—é –ø–æ —Ñ–∏–ª—å—Ç—Ä—É —Ç–æ—á–Ω–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –º–æ–Ω–≥—É (no_reminder —Ç–æ—á–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä—è—Ç—å –≤ –º–æ–Ω–≥–µ)
                .filter(task ->  task.getReminder() != SimpleTask.ReminderType.NO_REMINDER)
                .flatMap(task -> userService.findById(task.getUserId())
                        .flatMap(user -> {
                            if (user.getTimezone() == null) {
                                return notifySender.sendNotification(user.getTelegramId(),
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /settimezone");
                            }

                            ZoneId zone = ZoneId.of(user.getTimezone());
                            ZonedDateTime now = ZonedDateTime.ofInstant(nowUtc, zone);
                            // –î–µ–¥–ª–∞–π–Ω –≤ 00:00 –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            ZonedDateTime deadline = task.getDeadline().atStartOfDay(zone);

                            ZonedDateTime remindTime = switch (task.getReminder()) {
                                case ONE_HOUR_BEFORE -> deadline.minusHours(1); // 23:00 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
                                //case FIVE_MINUTES_BEFORE -> deadline.plusMinutes(229); // —É–±—Ä–∞—Ç—å
                                case ONE_DAY_BEFORE -> deadline.minusDays(1);
                                case ONE_WEEK_BEFORE -> deadline.minusWeeks(1);
                                default -> null;
                            };

                            // FIXME –≤–æ—Ç —ç—Ç–æ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä:
                            //  - —Å–¥–µ–ª–∞—Ç—å record SimpleTaskNotifyDto(telegramId, taskId, taskDescription, date)
                            //  - –≤–µ—Ä–Ω—É—Ç—å –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä—É Flux<SimpleTaskRemindDto>, –∞ —Ç–∞–º —É–∂–µ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä–µ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å
                            if (remindTime != null && isSameMinute(now, remindTime)) {
                                String message = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!"
                                        + "\nüÜî ID: " + task.getId()
                                        + "\nüìå –û–ø–∏—Å–∞–Ω–∏–µ: " + task.getDescription()
                                        + "\n‚ùó –î–µ–¥–ª–∞–π–Ω: " + deadline.toLocalDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
                                return notifySender.sendNotification(user.getTelegramId(), message);
                            }
                            return Mono.empty();
                        }));

        // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        Flux<Void> overdueNotifications = taskService.getOverdueTasks()
                .flatMap(task -> userService.findById(task.getUserId())
                        .flatMap(user -> {
                            if (user.getTimezone() == null) {
                                return Mono.empty(); // –£–∂–µ —É–≤–µ–¥–æ–º–∏–ª–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –≤—ã—à–µ
                            }
                            // FIXME —ç—Ç—É –ª–æ–≥–∏–∫—É —Ç–∞–∫–∂–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –º–æ–Ω–≥—É (—Å–º. –ø—Ä–∏–º–µ—Ä –≤—ã—à–µ)
                            ZoneId zone = ZoneId.of(user.getTimezone());
                            ZonedDateTime now = ZonedDateTime.ofInstant(nowUtc, zone);
                            ZonedDateTime deadline = task.getDeadline().atStartOfDay(zone);

                            // FIXME —ç—Ç–æ —Ç–æ–∂–µ –≤—ã–Ω–µ—Å—Ç–∏ –≤ –∫–æ–Ω—Ç—Ä–æ–ª–ª–µ—Ä –∏ —Å–¥–µ–ª–∞—Ç—å –∞–Ω–∞–ª–æ–≥–∏—á–Ω–æ –∫–∞–∫ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
                            if (isSameMinute(now/*.minusMinutes(229)*/, deadline.plusDays(1))) { //deadline.plusDays(1) –æ—Å—Ç–∞–≤–∏—Ç—å, now –æ—Å—Ç–∞–≤–∏—Ç—å
                                String message = "‚ö° –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫! "
                                        + "\nüÜî ID: " +  task.getId()
                                        + "\nüìå –û–ø–∏—Å–∞–Ω–∏–µ: " + task.getDescription()
                                        + "\n –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.";
                                return notifySender.sendNotification(user.getTelegramId(), message);
                            }
                            return Mono.empty();
                        }));

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ç–æ–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞—Ç–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏
        reminderNotifications
                .thenMany(overdueNotifications)
                .subscribe();
    }

    private boolean isSameMinute(ZonedDateTime a, ZonedDateTime b) {

        return a.getYear() == b.getYear()
                && a.getMonth() == b.getMonth()
                && a.getDayOfMonth() == b.getDayOfMonth()
                && a.getHour() == b.getHour()
                && a.getMinute() == b.getMinute();
    }
}
