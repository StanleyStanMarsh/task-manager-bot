package ru.spbstu.hsai.modules.notification.service;

import org.springframework.stereotype.Service;
import reactor.core.publisher.Mono;
import reactor.core.publisher.Flux;
import ru.spbstu.hsai.modules.simpletaskmanagment.model.SimpleTask;
import ru.spbstu.hsai.modules.simpletaskmanagment.repository.SimpleTaskRepository;
import ru.spbstu.hsai.modules.usermanagement.service.UserService;
import ru.spbstu.hsai.api.commands.notifier.TelegramNotifySender;
import ru.spbstu.hsai.modules.usermanagement.model.User;
import ru.spbstu.hsai.modules.simpletaskmanagment.service.SimpleTaskService;

import java.time.*;
import java.time.format.DateTimeFormatter;

@Service
public class NotificationService {
    private final UserService userService;
    private final TelegramNotifySender notifySender;
    private final SimpleTaskService taskService;



    public NotificationService(
                               UserService userService,
                               TelegramNotifySender notifySender, SimpleTaskService taskService) {
        this.userService = userService;
        this.notifySender = notifySender;
        this.taskService =taskService;
    }

    public void checkAndNotify() {
        Instant nowUtc = Instant.now();

        // –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è—Ö
        Flux<Void> reminderNotifications = taskService.getTasksForTenDays()
                .filter(task ->  task.getReminder() != SimpleTask.ReminderType.NO_REMINDER)
                .flatMap(task -> userService.findById(task.getUserId())
                        .flatMap(user -> {
                            if (user.getTimezone() == null) {
                                return notifySender.sendNotification(user.getTelegramId(),
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å —Å –ø–æ–º–æ—â—å—é /settimezone");
                            }

                            ZoneId zone = ZoneId.of(user.getTimezone());
                            ZonedDateTime now = ZonedDateTime.ofInstant(nowUtc, zone);
                            // –î–µ–¥–ª–∞–π–Ω –≤ 00:00 –≤ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
                            ZonedDateTime deadline = task.getDeadline().atStartOfDay(zone);

                            ZonedDateTime remindTime = switch (task.getReminder()) {
                                case ONE_HOUR_BEFORE -> deadline.minusHours(1); // 23:00 –ø—Ä–µ–¥—ã–¥—É—â–µ–≥–æ –¥–Ω—è
                                //case FIVE_MINUTES_BEFORE -> deadline.plusMinutes(229); // —É–±—Ä–∞—Ç—å
                                case ONE_DAY_BEFORE -> deadline.minusDays(1);
                                case ONE_WEEK_BEFORE -> deadline.minusWeeks(1);
                                default -> null;
                            };

                            if (remindTime != null && isSameMinute(now, remindTime)) {
                                String message = "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!"
                                        + "\nüÜî ID: " + task.getId()
                                        + "\nüìå –û–ø–∏—Å–∞–Ω–∏–µ: " + task.getDescription()
                                        + "\n‚ùó –î–µ–¥–ª–∞–π–Ω: " + deadline.toLocalDate().format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
                                return notifySender.sendNotification(user.getTelegramId(), message);
                            }
                            return Mono.empty();
                        }));

        // –ó–∞—Ç–µ–º –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö
        Flux<Void> overdueNotifications = taskService.getOverdueTasks()
                .flatMap(task -> userService.findById(task.getUserId())
                        .flatMap(user -> {
                            if (user.getTimezone() == null) {
                                return Mono.empty(); // –£–∂–µ —É–≤–µ–¥–æ–º–∏–ª–∏ –æ —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ –≤—ã—à–µ
                            }

                            ZoneId zone = ZoneId.of(user.getTimezone());
                            ZonedDateTime now = ZonedDateTime.ofInstant(nowUtc, zone);
                            ZonedDateTime deadline = task.getDeadline().atStartOfDay(zone);

                            if (isSameMinute(now/*.minusMinutes(229)*/, deadline.plusDays(1))) { //deadline.plusDays(1) –æ—Å—Ç–∞–≤–∏—Ç—å, now –æ—Å—Ç–∞–≤–∏—Ç—å
                                String message = "‚ö° –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫! "
                                        + "\nüÜî ID: " +  task.getId()
                                        + "\nüìå –û–ø–∏—Å–∞–Ω–∏–µ: " + task.getDescription()
                                        + "\n –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.";
                                return notifySender.sendNotification(user.getTelegramId(), message);
                            }
                            return Mono.empty();
                        }));

        // –û–±—ä–µ–¥–∏–Ω—è–µ–º –ø–æ—Ç–æ–∫–∏: —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è, –∑–∞—Ç–µ–º –ø—Ä–æ—Å—Ä–æ—á–∫–∏
        reminderNotifications
                .thenMany(overdueNotifications)
                .subscribe();
    }

    private boolean isSameMinute(ZonedDateTime a, ZonedDateTime b) {

        return a.getYear() == b.getYear()
                && a.getMonth() == b.getMonth()
                && a.getDayOfMonth() == b.getDayOfMonth()
                && a.getHour() == b.getHour()
                && a.getMinute() == b.getMinute();
    }
}
