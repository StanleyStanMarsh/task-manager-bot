package ru.spbstu.hsai.api.commands;

import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;
import reactor.core.publisher.Mono;
import ru.spbstu.hsai.api.UpdateReceivedEvent;
import ru.spbstu.hsai.core.MessageSender;
import ru.spbstu.hsai.repeatingtaskmanagment.RepeatingTaskInterface;
import ru.spbstu.hsai.simpletaskmanagment.SimpleTaskInterface;
import ru.spbstu.hsai.usermanagement.UserServiceInterface;

@Component
public class DeleteTaskCommand implements TelegramCommand {
    private final MessageSender sender;
    private final UserServiceInterface userService;
    private final SimpleTaskInterface taskService;
    private final RepeatingTaskInterface repeatingTaskService;

    public DeleteTaskCommand(MessageSender sender,
                             UserServiceInterface userService,
                             SimpleTaskInterface taskService,
                             RepeatingTaskInterface repeatingTaskService) {
        this.sender = sender;
        this.userService = userService;
        this.taskService = taskService;
        this.repeatingTaskService = repeatingTaskService;
    }

    @Override
    public boolean supports(String command) {
        return "/deletetask".equalsIgnoreCase(command);
    }

    @EventListener(condition = "@telegramCommandsExtract.checkCommand(#a0.update, '/deletetask')")
    public void handle(UpdateReceivedEvent event) {
        Message message = event.getUpdate().getMessage();
        User tgUser = message.getFrom();
        Long chatId = message.getChatId();
        String text = message.getText();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        String IdTask = text.substring("/deletetask".length()).trim();

        if (IdTask.isEmpty()) {
            sender.sendAsync(new SendMessage(chatId.toString(),
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /deletetask 68189edc1c9de42dfbcc7c79"));
            return;
        }

        userService.findByTelegramId(tgUser.getId())
                .flatMap(user -> {
                    // –ü—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∫–∞–∫ –æ–±—ã—á–Ω—É—é –∑–∞–¥–∞—á—É
                    return taskService.deleteTaskIfBelongsToUser(IdTask, user.getId())
                            .flatMap(deleted -> {
                                if (deleted) {
                                    return Mono.just(true);
                                }
                                // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ–±—ã—á–Ω—ã—Ö, –ø—Ä–æ–±—É–µ–º —É–¥–∞–ª–∏—Ç—å –∫–∞–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫—É—é
                                return repeatingTaskService.deleteTaskIfBelongsToUser(IdTask, user.getId());
                            });
                })
                .subscribe(deleted -> {
                    if (deleted) {
                        sender.sendAsync(new SendMessage(chatId.toString(), "üåü –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!\n\n" +
                                "–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"));
                    } else {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –ó–∞–¥–∞—á–∞ —Å ID " + IdTask + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.\n" +
                                        "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."));
                    }
                }, error -> {
                    sender.sendAsync(new SendMessage(chatId.toString(),
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: " + error.getMessage()));
                });

    }

}
