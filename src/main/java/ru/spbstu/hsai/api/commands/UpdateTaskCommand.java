package ru.spbstu.hsai.api.commands;

import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;
import reactor.core.publisher.Mono;
import ru.spbstu.hsai.api.commands.utils.TaskValidation;
import ru.spbstu.hsai.api.context.repeatingTaskUpdate.RepeatingTaskUpdateContext;
import ru.spbstu.hsai.api.context.repeatingTaskUpdate.RepeatingTaskUpdateState;
import ru.spbstu.hsai.api.context.repeatingTaskUpdate.RepeatingTaskUpdateStep;
import ru.spbstu.hsai.api.context.simpleTaskUpdate.SimpleTaskUpdateContext;
import ru.spbstu.hsai.api.context.simpleTaskUpdate.SimpleTaskUpdateState;
import ru.spbstu.hsai.api.context.simpleTaskUpdate.SimpleTaskUpdateStep;
import ru.spbstu.hsai.api.events.UpdateReceivedEvent;
import ru.spbstu.hsai.infrastructure.integration.telegram.TelegramSenderService;
import ru.spbstu.hsai.modules.repeatingtaskmanagment.model.RepeatingTask;
import ru.spbstu.hsai.modules.repeatingtaskmanagment.service.RepeatingTaskService;
import ru.spbstu.hsai.modules.simpletaskmanagment.model.SimpleTask;
import ru.spbstu.hsai.modules.simpletaskmanagment.service.SimpleTaskService;
import ru.spbstu.hsai.modules.usermanagement.service.UserService;

import java.time.LocalDate;
import java.time.LocalDateTime;

@Component
public class UpdateTaskCommand implements TelegramCommand {
    private final TelegramSenderService sender;
    private final UserService userService;
    private final SimpleTaskService taskService;
    private final SimpleTaskUpdateContext updateContext;
    private final RepeatingTaskService repeatingTaskService;
    private final RepeatingTaskUpdateContext repeatingTaskUpdateContext;

    public UpdateTaskCommand(TelegramSenderService sender,
                             UserService userService,
                             SimpleTaskService taskService,
                             SimpleTaskUpdateContext updateContext,
                             RepeatingTaskService repeatingTaskService,
                             RepeatingTaskUpdateContext repeatingTaskUpdateContext) {
        this.sender = sender;
        this.userService = userService;
        this.taskService = taskService;
        this.updateContext = updateContext;
        this.repeatingTaskService = repeatingTaskService;
        this.repeatingTaskUpdateContext = repeatingTaskUpdateContext;
    }

    @Override
    public boolean supports(String command) {
        return "/updatetask".equalsIgnoreCase(command);
    }

    @EventListener
    public void handleRegularMessage(UpdateReceivedEvent event) {
        Message message = event.getUpdate().getMessage();
        if (message == null || !message.hasText() || message.isCommand()) {
            return;
        }

        Long chatId = message.getChatId();
        if (updateContext.hasActiveSession(chatId)) {
            processUserInput(chatId, message.getText());
        } else if (repeatingTaskUpdateContext.hasActiveSession(chatId)) {
            processUserInputForRepeatingTasks(chatId, message.getText());
        }
    }

    @EventListener(condition = "@telegramCommandsExtract.checkCommand(#a0.update, '/updatetask')")
    public void handle(UpdateReceivedEvent event) {
        Message message = event.getUpdate().getMessage();
        User tgUser = message.getFrom();
        Long chatId = message.getChatId();
        String text = message.getText();

        // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∏–∑ –∫–æ–º–∞–Ω–¥—ã
        String taskId = text.substring("/updatetask".length()).trim();

        if (taskId.isEmpty()) {
            sender.sendAsync(new SendMessage(chatId.toString(),
                    "‚ùå –£–∫–∞–∂–∏—Ç–µ ID –∑–∞–¥–∞—á–∏. –ü—Ä–∏–º–µ—Ä: /updatetask 68189edc1c9de42dfbcc7c79"));
            return;
        }

        userService.findByTelegramId(tgUser.getId())
                .flatMap(user -> {
                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–Ω–∞—á–∞–ª–∞ SimpleTask
                    return taskService.taskExistsAndBelongsToUser(taskId, user.getId())
                            .flatMap(isSimpleTask -> {
                                if (isSimpleTask) {
                                    updateContext.startUpdate(chatId, taskId, user.getId());
                                    askWhatToUpdate(chatId);
                                    return Mono.just(true);
                                }
                                // –ï—Å–ª–∏ –Ω–µ SimpleTask, –ø—Ä–æ–≤–µ—Ä—è–µ–º RepeatingTask
                                return repeatingTaskService.taskExistsAndBelongsToUser(taskId, user.getId())
                                        .doOnNext(isRepeatingTask -> {
                                            if (isRepeatingTask) {
                                                repeatingTaskUpdateContext.startUpdate(chatId, taskId, user.getId());
                                                askWhatToUpdateForRepeatingTask(chatId);
                                            } else {
                                                sender.sendAsync(new SendMessage(chatId.toString(),
                                                        "‚ùå –ó–∞–¥–∞—á–∞ —Å ID " + taskId + " –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.\n" +
                                                                "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."));
                                            }
                                        });
                            });
                })
                .subscribe();

    }

    private void askWhatToUpdate(Long chatId) {
        String message = "ü§î –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n" +
                "1. –û–ø–∏—Å–∞–Ω–∏–µ\n" +
                "2. –°–ª–æ–∂–Ω–æ—Å—Ç—å\n" +
                "3. –î–µ–¥–ª–∞–π–Ω\n" +
                "4. –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ\n" +
                "5. –û—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—É—é\n" +
                "6. –û—Ç–º–µ–Ω–∞";

        SimpleTaskUpdateState state = updateContext.getState(chatId);
        state.setCurrentStep(SimpleTaskUpdateStep.SELECT_FIELD);
        updateContext.updateState(chatId, state);

        sender.sendAsync(new SendMessage(chatId.toString(), message));

    }

    private void askWhatToUpdateForRepeatingTask(Long chatId) {
        String message = "ü§î –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ –∏–∑–º–µ–Ω–∏—Ç—å?\n" +
                "1. –û–ø–∏—Å–∞–Ω–∏–µ\n" +
                "2. –°–ª–æ–∂–Ω–æ—Å—Ç—å\n" +
                "3. –ü–µ—Ä–∏–æ–¥–∏—á–Ω–æ—Å—Ç—å\n" +
                "4. –î–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏\n" +
                "5. –û—Ç–º–µ–Ω–∞";

        RepeatingTaskUpdateState state = repeatingTaskUpdateContext.getState(chatId);
        state.setCurrentStep(RepeatingTaskUpdateStep.SELECT_FIELD);
        repeatingTaskUpdateContext.updateState(chatId, state);

        sender.sendAsync(new SendMessage(chatId.toString(), message));

    }

    private void processUserInput(Long chatId, String input) {
        SimpleTaskUpdateState state = updateContext.getState(chatId);

        try {
            switch (state.getCurrentStep()) {
                case SELECT_FIELD:
                    int choice = Integer.parseInt(input);
                    if (choice < 1 || choice > 6) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 6 –≤ " +
                                        "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }

                    switch (choice) {
                        case 1:
                            state.setCurrentStep(SimpleTaskUpdateStep.NEW_DESCRIPTION);
                            askForNewDescription(chatId);
                            break;
                        case 2:
                            state.setCurrentStep(SimpleTaskUpdateStep.NEW_COMPLEXITY);
                            askForNewComplexity(chatId);
                            break;
                        case 3:
                            state.setCurrentStep(SimpleTaskUpdateStep.NEW_DEADLINE);
                            askForNewDeadline(chatId);
                            break;
                        case 4:
                            state.setCurrentStep(SimpleTaskUpdateStep.NEW_REMINDER);
                            askForNewReminder(chatId);
                            break;
                        case 5:
                            completeTaskUpdate(chatId, state, true);
                            break;
                        case 6:
                            cancelTaskUpdate(chatId);
                            break;
                    }
                    break;

                case NEW_DESCRIPTION:
                    if (input.length() > 200) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }
                    state.setDescription(input);
                    completeTaskUpdate(chatId, state, false);
                    break;

                case NEW_COMPLEXITY:
                    int complexity = Integer.parseInt(input);
                    if (complexity < 1 || complexity > 5) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏, –≤–≤–µ–¥—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 5. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }
                    state.setComplexity(complexity);
                    completeTaskUpdate(chatId, state, false);
                    break;

                case NEW_DEADLINE:
                    LocalDate deadline = TaskValidation.parseDate(input);
                    if (deadline == null || deadline.isBefore(LocalDate.now())) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ –Ω–µ —Ä–∞–Ω–µ–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã. " +
                                        "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }
                    state.setDeadline(deadline);
                    completeTaskUpdate(chatId, state, false);
                    break;

                case NEW_REMINDER:
                    int reminderChoice = Integer.parseInt(input);
                    if (reminderChoice < 1 || reminderChoice > 4) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 4 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç " +
                                        "–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }
                    SimpleTask.ReminderType reminder = TaskValidation.convertToReminderType(reminderChoice);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    // –ü–æ–ª—É—á–∞–µ–º –¥–µ–¥–ª–∞–π–Ω (–ª–∏–±–æ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è, –ª–∏–±–æ –∏–∑ –ë–î)
                    Mono<LocalDate> deadlineMono = (state.getDeadline() != null)
                            ? Mono.just(state.getDeadline())
                            : taskService.findTaskByIdAndUser(state.getTaskId(), state.getUserId())
                            .map(SimpleTask::getDeadline);

                    deadlineMono.subscribe(taskdeadline -> {
                                if (reminder != SimpleTask.ReminderType.NO_REMINDER) {
                                    if (!TaskValidation.isReminderValid(taskdeadline, reminder)) {
                                        sender.sendAsync(new SendMessage(chatId.toString(),
                                                "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. " +
                                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."));
                                        return;
                                    }
                                }
                        state.setReminder(reminder);
                        completeTaskUpdate(chatId, state, false);
                    });
                    break;
            }
            updateContext.updateState(chatId, state);
        } catch (NumberFormatException e) {
            sender.sendAsync(new SendMessage(chatId.toString(),
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."));
        }
    }

    private void askForNewDescription(Long chatId) {
        sender.sendAsync(new SendMessage(chatId.toString(), "üìå –í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"));
    }

    private void askForNewComplexity(Long chatId) {
        sender.sendAsync(new SendMessage(chatId.toString(), "üìä –û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –æ—Ç 1 –¥–æ 5:"));
    }

    private void askForNewDeadline(Long chatId) {
        sender.sendAsync(new SendMessage(chatId.toString(), "üóìÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –¥–µ–¥–ª–∞–π–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥):"));
    }

    private void askForNewReminder(Long chatId) {
        String message = "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–æ–≤–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞?\n" +
                "1. –ó–∞ 1 —á–∞—Å\n" +
                "2. –ó–∞ 1 –¥–µ–Ω—å\n" +
                "3. –ó–∞ 1 –Ω–µ–¥–µ–ª—é\n" +
                "4. –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è";
        sender.sendAsync(new SendMessage(chatId.toString(), message));
    }

    private void cancelTaskUpdate(Long chatId) {
        updateContext.complete(chatId);
        sender.sendAsync(new SendMessage(chatId.toString(), "‚ùó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!"+
                "\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"));
    }


    private void completeTaskUpdate(Long chatId, SimpleTaskUpdateState state, boolean markAsCompleted) {
        Mono<SimpleTask> updateMono;

        if (markAsCompleted) {
            updateMono = taskService.markAsCompleted(state.getTaskId(), state.getUserId());
        } else if (state.getDescription() != null) {
            updateMono = taskService.updateTaskDescription(state.getTaskId(), state.getUserId(), state.getDescription());
        } else if (state.getComplexity() != null) {
            updateMono = taskService.updateTaskComplexity(state.getTaskId(), state.getUserId(), state.getComplexity());
        } else if (state.getDeadline() != null) {
            updateMono = taskService.updateTaskDeadline(state.getTaskId(), state.getUserId(), state.getDeadline());
        } else if (state.getReminder() != null) {
            updateMono = taskService.updateTaskReminder(state.getTaskId(), state.getUserId(), state.getReminder());
        } else {
            updateMono = Mono.empty();
        }

        updateMono.subscribe(
                task -> {
                    String successMessage = markAsCompleted ?
                            "‚úÖ –ó–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!" : "üåü –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!" +
                            "\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help";;
                    sender.sendAsync(new SendMessage(chatId.toString(), successMessage));
                    updateContext.complete(chatId);
                },
                error -> {
                    sender.sendAsync(new SendMessage(chatId.toString(),
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: " + error.getMessage()));
                    updateContext.complete(chatId);
                }
        );
    }

    private void processUserInputForRepeatingTasks(Long chatId, String input) {
        RepeatingTaskUpdateState state = repeatingTaskUpdateContext.getState(chatId);

        try {
            switch (state.getCurrentStep()) {
                case SELECT_FIELD:
                    int choice = Integer.parseInt(input);
                    if (choice < 1 || choice > 5) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 5 –≤ " +
                                        "–∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }

                    switch (choice) {
                        case 1:
                            state.setCurrentStep(RepeatingTaskUpdateStep.NEW_DESCRIPTION);
                            askForNewDescription(chatId);
                            break;
                        case 2:
                            state.setCurrentStep(RepeatingTaskUpdateStep.NEW_COMPLEXITY);
                            askForNewComplexity(chatId);
                            break;
                        case 3:
                            state.setCurrentStep(RepeatingTaskUpdateStep.NEW_FREQUENCY);
                            askForNewFrequency(chatId);
                            break;
                        case 4:
                            state.setCurrentStep(RepeatingTaskUpdateStep.NEW_START_DATE);
                            askForNewStartDate(chatId);
                            break;
                        case 5:
                            cancelTaskUpdateRepeatingTask(chatId);
                            break;
                    }
                    break;

                case NEW_DESCRIPTION:
                    if (input.length() > 200) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }
                    state.setDescription(input);
                    completeRepeatingTaskUpdate(chatId, state);
                    break;

                case NEW_COMPLEXITY:
                    int complexity = Integer.parseInt(input);
                    if (complexity < 1 || complexity > 5) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏, –≤–≤–µ–¥—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 5. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }
                    state.setComplexity(complexity);
                    completeRepeatingTaskUpdate(chatId, state);
                    break;

                case NEW_FREQUENCY:
                    int frequencyChoice = Integer.parseInt(input);
                    if (frequencyChoice < 1 || frequencyChoice > 4) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 4 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç " +
                                        "–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }

                    RepeatingTask.RepeatFrequency frequency = TaskValidation.convertToFrequencyType(frequencyChoice);

                    state.setFrequency(frequency);
                    completeRepeatingTaskUpdate(chatId, state);
                    break;

                case NEW_START_DATE:
                    LocalDateTime startdatetime = TaskValidation.parseDateTime(input);
                    if (startdatetime == null || startdatetime.isBefore(LocalDateTime.now())) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –£–∫–∞–∂–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º, " +
                                        "–Ω–µ —Ä–∞–Ω–µ–µ —Ç–µ–∫—É—â–µ–≥–æ –º–æ–º–µ–Ω—Ç–∞.\n" +
                                        "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }

                    state.setStartDateTime(startdatetime);
                    completeRepeatingTaskUpdate(chatId, state);
                    break;
            }
            repeatingTaskUpdateContext.updateState(chatId, state);
        } catch (NumberFormatException e) {
            sender.sendAsync(new SendMessage(chatId.toString(),
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."));
        }
    }

    private void cancelTaskUpdateRepeatingTask(Long chatId) {
        repeatingTaskUpdateContext.complete(chatId);
        sender.sendAsync(new SendMessage(chatId.toString(), "‚ùó –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –æ—Ç–º–µ–Ω–µ–Ω–æ!"+
                "\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help"));
    }


    private void askForNewFrequency(Long chatId) {
        String message = "üîÅ –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—ã–π –ø–µ—Ä–∏–æ–¥ –ø–æ–≤—Ç–æ—Ä–µ–Ω–∏—è –∑–∞–¥–∞—á–∏:\n" +
                "1. –ï–∂–µ—á–∞—Å–Ω–æ\n" +
                "2. –ï–∂–µ–¥–Ω–µ–≤–Ω–æ\n" +
                "3. –ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–æ\n" +
                "4. –ï–∂–µ–º–µ—Å—è—á–Ω–æ";
        sender.sendAsync(new SendMessage(chatId.toString(), message));
    }

    private void askForNewStartDate(Long chatId) {
        sender.sendAsync(new SendMessage(chatId.toString(),
                "üóìÔ∏è –£–∫–∞–∂–∏—Ç–µ –Ω–æ–≤—É—é –¥–∞—Ç—É –∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∑–∞–¥–∞—á–∏ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ —á—á:–º–º) "));
    }

    private void completeRepeatingTaskUpdate(Long chatId, RepeatingTaskUpdateState state) {
        Mono<RepeatingTask> updateMono;

        if (state.getDescription() != null) {
            updateMono = repeatingTaskService.updateTaskDescription(state.getTaskId(), state.getUserId(),
                    state.getDescription());
        } else if (state.getComplexity() != null) {
            updateMono = repeatingTaskService.updateTaskComplexity(state.getTaskId(), state.getUserId(),
                    state.getComplexity());
        } else if (state.getFrequency() != null) {
            updateMono = repeatingTaskService.updateTaskFrequency(state.getTaskId(), state.getUserId(),
                    state.getFrequency());
        } else if (state.getStartDateTime() != null) {
            updateMono = repeatingTaskService.updateTaskStartDateTime(state.getTaskId(), state.getUserId(),
                    state.getStartDateTime());
        } else {
            updateMono = Mono.empty();
        }

        updateMono.subscribe(
                task -> {
                    String message =  "üåü –ó–∞–¥–∞—á–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω–∞!" +
                            "\n\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help";;
                    sender.sendAsync(new SendMessage(chatId.toString(), message));
                    repeatingTaskUpdateContext.complete(chatId);
                },
                error -> {
                    sender.sendAsync(new SendMessage(chatId.toString(),
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏: " + error.getMessage()));
                    repeatingTaskUpdateContext.complete(chatId);
                }
        );
    }

}
