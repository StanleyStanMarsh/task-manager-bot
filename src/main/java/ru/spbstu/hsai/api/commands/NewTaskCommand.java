package ru.spbstu.hsai.api.commands;

import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;
import ru.spbstu.hsai.api.context.simpleTaskCreation.SimpleTaskCreationContext;
import ru.spbstu.hsai.api.context.simpleTaskCreation.SimpleTaskCreationState;
import ru.spbstu.hsai.api.context.simpleTaskCreation.SimpleTaskCreationStep;
import ru.spbstu.hsai.api.events.UpdateReceivedEvent;
import ru.spbstu.hsai.infrastructure.integration.telegram.TelegramSenderService;
import ru.spbstu.hsai.modules.simpletaskmanagment.model.SimpleTask;
import ru.spbstu.hsai.modules.simpletaskmanagment.service.SimpleTaskService;
import ru.spbstu.hsai.modules.usermanagement.service.UserService;

import java.time.LocalDate;
import java.time.format.DateTimeFormatter;
import java.time.format.DateTimeParseException;

@Component
public class NewTaskCommand implements TelegramCommand {
    private final TelegramSenderService sender;
    private final UserService userService;
    private final SimpleTaskService taskService;
    private final SimpleTaskCreationContext creationContext;

    public NewTaskCommand(TelegramSenderService sender,
                          UserService userService,
                          SimpleTaskService taskService,
                          SimpleTaskCreationContext creationContext) {
        this.sender = sender;
        this.userService = userService;
        this.taskService = taskService;
        this.creationContext = creationContext;
    }

    @Override
    public boolean supports(String command) {
        return "/newtask".equalsIgnoreCase(command);
    }


    @EventListener(condition = "@telegramCommandsExtract.checkCommand(#a0.update, '/newtask')")
    public void handle(UpdateReceivedEvent event) {
        Message message = event.getUpdate().getMessage();
        User tgUser = message.getFrom();
        Long chatId = message.getChatId();

        System.out.println("Received /newtask command from chat " + chatId);

        if (!creationContext.hasActiveSession(chatId)) {
            userService.findByTelegramId(tgUser.getId())
                    .subscribe(user -> {
                        System.out.println("Starting task creation for user " + user.getId());
                        creationContext.startCreation(chatId, user.getId());
                        askForDescription(chatId);
                    }, error -> {
                        System.err.println("Error finding user: " + error.getMessage());
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–∏—Å–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"));
                    });
        } else {
            processUserInput(chatId, message.getText());
        }
    }

    @EventListener
    public void handleRegularMessage(UpdateReceivedEvent event) {
        Message message = event.getUpdate().getMessage();
        if (message == null || !message.hasText() || message.isCommand()) {
            return;
        }

        Long chatId = message.getChatId();
        if (creationContext.hasActiveSession(chatId)) {
            System.out.println("Processing regular message for chat " + chatId);
            processUserInput(chatId, message.getText());
        }
    }

    private void processUserInput(Long chatId, String input) {
        SimpleTaskCreationState state = creationContext.getState(chatId);

        try {
            switch (state.getCurrentStep()) {
                case DESCRIPTION:
                    if (input.length() > 200) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –û–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 200 —Å–∏–º–≤–æ–ª–æ–≤. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }
                    state.setDescription(input);
                    state.setCurrentStep(SimpleTaskCreationStep.COMPLEXITY);
                    askForComplexity(chatId);
                    break;

                case COMPLEXITY:
                    int complexity = Integer.parseInt(input);
                    if (complexity < 1 || complexity > 5) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏, –≤–≤–µ–¥—è —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 5. " +
                                        "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }
                    state.setComplexity(complexity);
                    state.setCurrentStep(SimpleTaskCreationStep.DEADLINE);
                    askForDeadline(chatId);
                    break;

                case DEADLINE:
                    LocalDate deadline = parseDate(input);
                    if (deadline == null || deadline.isBefore(LocalDate.now())) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥ –Ω–µ —Ä–∞–Ω–µ–µ —Ç–µ–∫—É—â–µ–π –¥–∞—Ç—ã. " +
                                        "–ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }
                    state.setDeadline(deadline);
                    state.setCurrentStep(SimpleTaskCreationStep.REMINDER);
                    askForReminder(chatId);
                    break;

                case REMINDER:
                    int reminderChoice = Integer.parseInt(input);
                    if (reminderChoice < 1 || reminderChoice > 4) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ –æ—Ç 1 –¥–æ 4 –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç " +
                                        "–≤—ã–±—Ä–∞–Ω–Ω–æ–≥–æ –¥–µ–π—Å—Ç–≤–∏—è. –ü–æ–≤—Ç–æ—Ä–∏—Ç–µ –≤–≤–æ–¥."));
                        return;
                    }

                    SimpleTask.ReminderType reminder = convertToReminderType(reminderChoice);

                    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
                    if (reminder != SimpleTask.ReminderType.NO_REMINDER &&
                            !isReminderValid(state.getDeadline(), reminder)) {
                        sender.sendAsync(new SendMessage(chatId.toString(),
                                "‚ùå –ù–µ–ª—å–∑—è —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –Ω–∞ –ø—Ä–æ—à–µ–¥—à—É—é –¥–∞—Ç—É. " +
                                        "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –¥—Ä—É–≥–æ–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ."));
                        return;
                    }

                    state.setReminder(reminder);
                    completeTaskCreation(chatId, state);
                    break;
            }
            creationContext.updateState(chatId, state);
        } catch (NumberFormatException e) {
            sender.sendAsync(new SendMessage(chatId.toString(),
                    "‚ùå –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ."));
        }
    }


    private void askForDescription(Long chatId) {
        sender.sendAsync(new SendMessage(chatId.toString(), "üìå –í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏:"));
    }

    private void askForComplexity(Long chatId) {
        sender.sendAsync(new SendMessage(chatId.toString(),
                "üìä –û—Ü–µ–Ω–∏—Ç–µ —Å–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–¥–∞—á–∏ –æ—Ç 1 –¥–æ 5:"));
    }

    private void askForDeadline(Long chatId) {
        sender.sendAsync(new SendMessage(chatId.toString(),
                "üóìÔ∏è –£–∫–∞–∂–∏—Ç–µ –¥–µ–¥–ª–∞–π–Ω (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–¥.–º–º.–≥–≥–≥–≥):"));
    }

    private void askForReminder(Long chatId) {
        String message = "‚è∞ –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–¥–∞—á–µ –¥–æ –¥–µ–¥–ª–∞–π–Ω–∞?\n" +
                "1. –ó–∞ 1 —á–∞—Å\n" +
                "2. –ó–∞ 1 –¥–µ–Ω—å\n" +
                "3. –ó–∞ 1 –Ω–µ–¥–µ–ª—é\n" +
                "4. –ë–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è";
        sender.sendAsync(new SendMessage(chatId.toString(), message));
    }

    private void completeTaskCreation(Long chatId, SimpleTaskCreationState state) {
        taskService.createTask(
                state.getUserId(),
                state.getDescription(),
                state.getComplexity(),
                state.getDeadline(),
                state.getReminder()
        ).subscribe(
                task -> {
                    String successMessage = "‚úÖ–ó–∞–¥–∞—á–∞ —Å–æ–∑–¥–∞–Ω–∞!\n" + task.toString() +
                            "\n–ï—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –≤–µ—Ä–Ω—É—Ç—å—Å—è –∫ —Å–ø–∏—Å–∫—É –∫–æ–º–∞–Ω–¥, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help";;
                    SendMessage response = new SendMessage(chatId.toString(), successMessage);
                    response.enableHtml(true);
                    sender.sendAsync(response);
                    creationContext.complete(chatId);
                },
                error -> {
                    sender.sendAsync(new SendMessage(chatId.toString(),
                            "‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–¥–∞—á–∏: " + error.getMessage()));
                    creationContext.complete(chatId);
                }
        );
    }

    private LocalDate parseDate(String input) {
        try {
            return LocalDate.parse(input, DateTimeFormatter.ofPattern("dd.MM.yyyy"));
        } catch (DateTimeParseException e) {
            return null;
        }
    }

    private SimpleTask.ReminderType convertToReminderType(int choice) {
        return switch (choice) {
            case 1 -> SimpleTask.ReminderType.ONE_HOUR_BEFORE;
            case 2 -> SimpleTask.ReminderType.ONE_DAY_BEFORE;
            case 3 -> SimpleTask.ReminderType.ONE_WEEK_BEFORE;
            default -> SimpleTask.ReminderType.NO_REMINDER;
        };
    }

    private boolean isReminderValid(LocalDate deadline, SimpleTask.ReminderType reminder) {
        LocalDate reminderDate = calculateReminderDate(deadline, reminder);
        return reminderDate.isAfter(LocalDate.now());
    }

    private LocalDate calculateReminderDate(LocalDate deadline, SimpleTask.ReminderType reminder) {
        return switch (reminder) {
            case ONE_HOUR_BEFORE -> deadline; // –î–ª—è —á–∞—Å–æ–≤–æ–≥–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–º –¥–µ–¥–ª–∞–π–Ω
            case ONE_DAY_BEFORE -> deadline.minusDays(1);
            case ONE_WEEK_BEFORE -> deadline.minusWeeks(1);
            case NO_REMINDER -> deadline; // –î–ª—è "–±–µ–∑ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è" –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ –Ω—É–∂–Ω–∞
        };
    }

}
