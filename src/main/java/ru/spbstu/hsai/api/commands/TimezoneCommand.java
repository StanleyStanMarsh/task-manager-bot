package ru.spbstu.hsai.api.commands;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.context.event.EventListener;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.User;
import reactor.core.publisher.Mono;
import ru.spbstu.hsai.api.events.UpdateReceivedEvent;
import ru.spbstu.hsai.infrastructure.integration.telegram.TelegramSenderService;
import ru.spbstu.hsai.modules.usermanagement.service.UserService;
import java.time.ZoneId;
import java.util.Map;
import java.util.concurrent.ConcurrentHashMap;

@Component
public class TimezoneCommand implements TelegramCommand {

    private final TelegramSenderService sender;
    private final UserService userService;
    private final ConcurrentHashMap<Long, Boolean> awaitingTimezoneUsers;
    private static final Map<String, String> TIMEZONE_MAPPING = Map.ofEntries(
            Map.entry("–ú–°–ö-1", "Europe/Kaliningrad"),
            Map.entry("–ú–°–ö", "Europe/Moscow"),
            Map.entry("–ú–°–ö+1", "Europe/Samara"),
            Map.entry("–ú–°–ö+2", "Asia/Yekaterinburg"),
            Map.entry("–ú–°–ö+3", "Asia/Omsk"),
            Map.entry("–ú–°–ö+4", "Asia/Krasnoyarsk"),
            Map.entry("–ú–°–ö+5", "Asia/Irkutsk"),
            Map.entry("–ú–°–ö+6", "Asia/Yakutsk"),
            Map.entry("–ú–°–ö+7", "Asia/Vladivostok"),
            Map.entry("–ú–°–ö+8", "Asia/Magadan"),
            Map.entry("–ú–°–ö+9", "Asia/Kamchatka")
    );

    @Autowired
    public TimezoneCommand(TelegramSenderService sender, UserService userService) {
        this.sender = sender;
        this.userService = userService;
        this.awaitingTimezoneUsers = new ConcurrentHashMap<>();
    }

    @Override
    public boolean supports(String command) {
        return false; // –≠—Ç–æ—Ç –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—ã, —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    }

    @EventListener
    public void handle(UpdateReceivedEvent event) {
        if (!event.getUpdate().hasMessage() || !event.getUpdate().getMessage().hasText()) {
            return;
        }

        Message message = event.getUpdate().getMessage();
        User tgUser = message.getFrom();
        Long chatId = tgUser.getId();
        String text = message.getText().trim();

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –æ–∂–∏–¥–∞–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–≤–æ–¥–∞ —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        if (!awaitingTimezoneUsers.containsKey(chatId)) {
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å —á–∞—Å–æ–≤–æ–≥–æ –ø–æ—è—Å–∞
        if (TIMEZONE_MAPPING.containsKey(text)) {
            String zoneId = TIMEZONE_MAPPING.get(text);
            try {
                ZoneId.of(zoneId); // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ ZoneId –≤–∞–ª–∏–¥–Ω—ã–π
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
                userService.updateTimezone(chatId, zoneId)
                        .then(Mono.just(SendMessage.builder()
                                .chatId(chatId)
                                .text(String.format(
                                        """
                                        üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, %s! üéâ
                                        –í–∞—à —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å (%s) —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω!
                                        –≠—Ç–æ—Ç –ë–æ—Ç –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –∑–∞–¥–∞—á–∞–º–∏ –∏ –Ω–µ –∑–∞–±—ã–≤–∞—Ç—å –æ –Ω–∏—Ö!
                                        –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /help, —á—Ç–æ–±—ã –æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è —Å–æ —Å–ø–∏—Å–∫–æ–º –∫–æ–º–∞–Ω–¥.
                                        """,
                                        tgUser.getUserName() != null ? tgUser.getUserName() : tgUser.getFirstName(),
                                        text
                                ))
                                .build()))
                        .flatMap(sm -> Mono.fromCompletionStage(sender.sendAsync(sm)))
                        .doOnSuccess(v -> {
                            awaitingTimezoneUsers.remove(chatId);
                            System.out.println("Timezone set and welcome message sent for chatId=" + chatId);
                        })
                        .doOnError(e -> System.out.println("Error saving timezone or sending welcome: " + e.getMessage()))
                        .subscribe();
            } catch (Exception e) {
                sendInvalidTimezonePrompt(chatId);
            }
        } else {
            sendInvalidTimezonePrompt(chatId);
        }
    }

    private void sendInvalidTimezonePrompt(Long chatId) {
        Mono.just(SendMessage.builder()
                        .chatId(chatId)
                        .text("""
                      –ù–µ–≤–µ—Ä–Ω—ã–π —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏—Ç–µ –∏–∑ —Å–ø–∏—Å–∫–∞ –Ω–∏–∂–µ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –µ–≥–æ –Ω–∞–∑–≤–∞–Ω–∏–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ú–°–ö):
                      - –ú–°–ö-1 (–∫–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö   (–º–æ—Å–∫–æ–≤—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö+1 (—Å–∞–º–∞—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö+2 (–µ–∫–∞—Ç–µ—Ä–∏–Ω–±—É—Ä–≥—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö+3 (–æ–º—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö+4 (–∫—Ä–∞—Å–Ω–æ—è—Ä—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö+5 (–∏—Ä–∫—É—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö+6 (—è–∫—É—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö+7 (–≤–ª–∞–¥–∏–≤–æ—Å—Ç–æ–∫—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö+8 (–º–∞–≥–∞–¥–∞–Ω—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      - –ú–°–ö+9 (–∫–∞–º—á–∞—Ç—Å–∫–æ–µ –≤—Ä–µ–º—è)
                      """)
                        .build())
                .flatMap(sm -> Mono.fromCompletionStage(sender.sendAsync(sm)))
                .doOnSuccess(v -> System.out.println("Invalid timezone, prompt resent for chatId=" + chatId))
                .doOnError(e -> System.out.println("Error sending timezone prompt: " + e.getMessage()))
                .subscribe();
    }

    // –ú–µ—Ç–æ–¥ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ –æ–∂–∏–¥–∞—é—â–∏—Ö —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å
    public void addAwaitingTimezoneUser(Long chatId) {
        awaitingTimezoneUsers.put(chatId, true);
    }
}