package ru.spbstu.hsai.notification.controller;

import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;
import reactor.core.publisher.Flux;
import reactor.core.publisher.Mono;
import ru.spbstu.hsai.api.TelegramNotifySender;
import ru.spbstu.hsai.notification.service.NotificationService;
import ru.spbstu.hsai.repeatingtaskmanagment.RepeatingTask;
import ru.spbstu.hsai.repeatingtaskmanagment.RepeatingTaskInterface;
import ru.spbstu.hsai.simpletaskmanagment.SimpleTask;
import ru.spbstu.hsai.usermanagement.UserServiceInterface;

import java.time.*;
import java.time.format.DateTimeFormatter;
import java.util.List;

@RestController
@RequestMapping("/api/notifications")
public class NotificationController {

    private static final Logger logger = LoggerFactory.getLogger(NotificationController.class);
    private final NotificationService notificationService;
    private final UserServiceInterface userService;
    private final TelegramNotifySender notifySender;
    private final RepeatingTaskInterface repeatingTaskService;

    @Autowired
    public NotificationController(
            NotificationService notificationService,
            UserServiceInterface userService,
            TelegramNotifySender notifySender,
            RepeatingTaskInterface repeatingTaskService) {
        this.notificationService = notificationService;
        this.userService = userService;
        this.notifySender = notifySender;
        this.repeatingTaskService = repeatingTaskService;
    }

    /**
     * –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è —Ä—É—á–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
     * @param time –í—Ä–µ–º—è –≤ —Ñ–æ—Ä–º–∞—Ç–µ ISO-8601 (–Ω–∞–ø—Ä–∏–º–µ—Ä, 2025-05-10T00:00:00Z).
     * @return Mono<Void> –ø–æ—Å–ª–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
     */
    @GetMapping("/trigger")
    public Mono<Void> triggerNotifications(@RequestParam String time) {
        Instant nowUtc;
        try {
            nowUtc = Instant.parse(time);
        } catch (Exception e) {
            logger.error("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏: {}", time, e);
            return Mono.error(new IllegalArgumentException("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏"));
        }
        return notificationService.checkAndNotify(nowUtc, this);
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è –æ–¥–Ω–æ–π –∑–∞–¥–∞—á–∏.
     * @param task –ó–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
     * @param isOverdue –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π, –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞ –ª–∏ –∑–∞–¥–∞—á–∞.
     * @return Mono<Void> –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è.
     */
    public Mono<Void> sendNotification(SimpleTask task, boolean isOverdue) {
        return userService.findById(task.getUserId())
                .flatMap(user -> {
                    ZoneId userZone = ZoneId.of(user.getTimezone());
                    String message = buildReminderMessage(task, userZone, isOverdue);
                    return notifySender.sendNotification(user.getTelegramId(), message);
                })
                .then()
                .onErrorResume(e -> {
                    logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –∑–∞–¥–∞—á–∏ {}: {}", task.getId(), e.getMessage());
                    return Mono.empty();
                });
    }

    /**
     * –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á.
     * @param repeatingTasks –°–ø–∏—Å–æ–∫ –ø–æ–≤—Ç–æ—Ä—è—é—â–∏—Ö—Å—è –∑–∞–¥–∞—á.
     * @param nowUtc –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è –≤ UTC.
     * @return Flux<Void> –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤—Å–µ—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π.
     */
    public Flux<Void> sendRepeatingTaskReminders(List<RepeatingTask> repeatingTasks, Instant nowUtc) {
        return Flux.fromIterable(repeatingTasks)
                .flatMap(rt -> userService.findById(rt.getUserId())
                        .flatMap(user -> {
                            ZoneId userZone = ZoneId.of(user.getTimezone());
                            ZonedDateTime nextExecZoned = rt.getNextExecution()
                                    .atZone(ZoneId.of("Europe/Moscow"))
                                    .withZoneSameInstant(userZone);

                            String time = nextExecZoned.toLocalTime()
                                    .format(DateTimeFormatter.ofPattern("HH:mm"));
                            String msg = "üîÑ –ü–æ–≤—Ç–æ—Ä—è—é—â–∞—è—Å—è –∑–∞–¥–∞—á–∞:" +
                                    "\nüÜî ID: <code>" + rt.getId() + "</code>" +
                                    "\nüìå –û–ø–∏—Å–∞–Ω–∏–µ: " + rt.getDescription() +
                                    "\n‚è∞ –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ: " + time;

                            return notifySender.sendNotification(user.getTelegramId(), msg)
                                    .then(repeatingTaskService.processCompletedTask(
                                            rt,
                                            LocalDateTime.ofInstant(nowUtc, userZone)
                                    ))
                                    .then();
                        })
                        .onErrorResume(e -> {
                            logger.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–≤—Ç–æ—Ä—è—é—â–µ–π—Å—è –∑–∞–¥–∞—á–∏ {}: {}", rt.getId(), e.getMessage());
                            return Mono.empty();
                        })
                )
                .thenMany(Flux.empty());
    }

    /**
     * –§–æ—Ä–º–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è.
     * @param task –ó–∞–¥–∞—á–∞.
     * @param userZone –ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
     * @param isOverdue –§–ª–∞–≥ –ø—Ä–æ—Å—Ä–æ—á–∫–∏.
     * @return –¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
     */
    private String buildReminderMessage(SimpleTask task, ZoneId userZone, boolean isOverdue) {
        LocalDate deadline = task.getDeadline();
        if (isOverdue) {
            return "‚ö°Ô∏è –î–µ–¥–ª–∞–π–Ω –∑–∞–¥–∞—á–∏ –∏—Å—Ç–µ–∫!" +
                    "\nüÜî ID: <code>" + task.getId() + "</code>" +
                    "\nüìå –û–ø–∏—Å–∞–Ω–∏–µ: " + task.getDescription() +
                    "\n –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç–º–µ—Ç–∏—Ç—å –∑–∞–¥–∞—á—É –∑–∞–≤–µ—Ä—à–µ–Ω–Ω–æ–π –∏–ª–∏ –æ–±–Ω–æ–≤–∏—Ç—å –¥–µ–¥–ª–∞–π–Ω –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏.";
        } else {
            return "üîî –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ!" +
                    "\nüÜî ID: <code>" + task.getId() + "</code>" +
                    "\nüìå –û–ø–∏—Å–∞–Ω–∏–µ: " + task.getDescription() +
                    "\n‚ùóÔ∏è –î–µ–¥–ª–∞–π–Ω: " + deadline.format(DateTimeFormatter.ofPattern("dd.MM.yyyy"));
        }
    }
}